openapi: 3.0.3
info:
  title: Amrutam API
  version: 1.0.0
  description: API documentation for Amrutam backend (appointments, doctors, users)
servers:
  - url: http://localhost:5000/api
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterData'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Email already registered
        '500':
          description: Internal server error
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid email or password
        '500':
          description: Internal server error
  /auth/profile:
    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /doctors:
    get:
      summary: Get list of doctors
      parameters:
        - in: query
          name: specialization
          schema:
            type: string
        - in: query
          name: mode
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: object
                properties:
                  doctors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalDoctors:
                    type: integer
        '500':
          description: Internal server error
  /doctors/{id}:
    get:
      summary: Get doctor by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
        '500':
          description: Internal server error
  /appointments:
    get:
      summary: Get appointments for user
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: upcoming
          schema:
            type: boolean
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  totalAppointments:
                    type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      summary: Book an appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookAppointmentData'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Appointment booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /appointments/{id}/cancel:
    put:
      summary: Cancel appointment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Appointment cancelled
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /appointments/{id}/reschedule:
    put:
      summary: Reschedule appointment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newDate:
                  type: string
                  format: date
                newTime:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Appointment rescheduled
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterData:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        role:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
        isVerified:
          type: boolean
    UserResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Doctor:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        specialization:
          type: string
        experience:
          type: integer
        bio:
          type: string
        rating:
          type: number
        totalReviews:
          type: integer
        consultationFee:
          type: number
        consultationModes:
          type: array
          items:
            type: string
    Appointment:
      type: object
      properties:
        id:
          type: string
        patientId:
          type: string
        doctor:
          $ref: '#/components/schemas/Doctor'
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          type: string
        duration:
          type: integer
        consultationMode:
          type: string
        status:
          type: string
        symptoms:
          type: string
        prescriptions:
          type: string
        notes:
          type: string
        fee:
          type: number
        paymentStatus:
          type: string
        cancellationReason:
          type: string
        lockedUntil:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BookAppointmentData:
      type: object
      properties:
        doctorId:
          type: string
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          type: string
        consultationMode:
          type: string
        symptoms:
          type: string
